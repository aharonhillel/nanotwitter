swagger: '2.0'
info:
  description: |
    NanoTwitter for Brandeis University's Scalability taught by Pito Salas
  version: 1.0.0
  title: nanoTwitter
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
tags:
- name: users
  description: Everything about your Users
  externalDocs:
    description: Find out more
    url: http://swagger.io
- name: tweets
  description: Access to Tweets
- name: follows
  description: User following
  externalDocs:
    description: Find out more about our nanotwitter
    url: http://swagger.io
- name: hash_tags
  description: User hashtags
  externalDocs:
    description: Find out more about our nanotwitter
    url: http://swagger.io
- name: likes
  description: User likes
  externalDocs:
    description: Find out more about our nanotwitter
    url: http://swagger.io
- name: comments
  description: Comments from users to tweets
- name: mentions
  description: Users being mentioned in other users' tweets
- name: search
  description: Operations about user
- name: notifications
  description: User notifications
paths:
  /users/new:
    post:
      tags:
      - users
      summary: Add a new user
      operationId: addUser
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: User
        description: New user to add
        schema:
          $ref: '#/definitions/User'
      responses:
        200: 
          description: OK
        403:
          description: Failed to create user
  /users/{username}:
    get:
      tags:
      - users
      summary: Finds user by username
      description: Finds user by username
      produces:
      - application/json
      parameters:
      - name: username
        in: path
        description: username of the user to be found
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        400:
          description: Invalid username value
    put:
      tags:
      - users
      summary: Update an existing user information
      operationId: updateUser
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: username
        in: path
        description: username of the user to be found
        required: true
        type: string
      responses:
        200:
          description: OK
        404:
          description: User not found
        405:
          description: Validation exception
  /{username}/tweets:
    get:
      tags:
      - users
      summary: Display current user's tweets
      description: Returns a list of a user's tweets
      operationId: getTweetsByUsername
      produces:
      - application/json
      parameters:
      - name: username
        in: path
        description: username of a user for their tweets
        required: true
        type: string
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Tweet'
        400:
          description: Invalid user supplied
        404:
          description: user not found
      security:
      - api_key: []
  /tweets/recent:
    get:
      tags:
      - tweets
      summary: Returns the most recent 50 tweets 
      description: Returns a list of most recent updated tweets
      operationId: getInventory
      produces:
      - application/json
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Tweet'
  /tweets/following:
    get:
      tags:
      - tweets
      summary: Returns tweets from users followed by current user
      description: Returns a list of  tweets from users followed by current user
      produces:
      - application/json
      responses:
        200:
          description: successful operation
  /tweets/new:
    post:
      tags:
      - tweets
      summary: Create a new tweet
      produces:
      - application/json
      parameters:
      - in: body
        name: Tweet
        description: New user to add
        schema:
          $ref: '#/definitions/Tweet'
      responses:
        200:
          description: successful operation
        400:
          description: Invalid Tweet
  /tweets/{tweetId}:
    get:
      tags:
      - tweets
      summary: Find tweets by ID
      description: For valid response try integer IDs. Non-existent ID will generate exceptions.
      produces:
      - application/json
      parameters:
      - name: tweetId
        in: path
        description: ID of tweet that needs to be fetched
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Tweet'
        400:
          description: Invalid ID supplied
        404:
          description: Tweet not found
    delete:
      tags:
      - tweets
      summary: Delete tweet by ID
      description: delete tweet
      operationId: deleteTweet
      produces:
      - application/json
      parameters:
      - name: tweetId
        in: path
        description: ID of the tweet that needs to be deleted
        required: true
        type: integer
        format: int64
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Tweet not found
  /tweets/trending/{hash_tag}:
    get:
      tags:
      - tweets
      summary: Find tweets by hash_tag 
      description: For valid response try integer hash_tag ID. 
      operationId: getTweetByHash_tagId
      produces:
      - application/json
      parameters:
      - name: hash_tag
        in: path
        description: ID of hash_tag on tweets that needs to be fetched
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Tweet'
        400:
          description: Invalid ID supplied
        404:
          description: Tweet not found
  /comments/{tweet_id}/new:
    post:
      tags:
      - comments
      summary: Create a new comment for a tweet
      produces:
      - application/json
      parameters:
      - name: tweet_id
        in: path
        description: ID of tweet to be commented
        required: true
        type: integer
        format: int64
      - in: body
        name: Comment
        description: New comment to add
        schema:
          $ref: '#/definitions/Comment'
      responses:
        200:
          description: successful operation
        400:
          description: Invalid tweet_id
  /comments/{tweet_id}:
    get:
      tags:
      - comments
      summary: All comments for a specific tweet
      description: Return a list of all comments for a specific tweet
      produces:
      - application/json
      parameters:
      - name: tweet_id
        in: path
        description: id for a specific tweet
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Comment'
        400:
          description: Invalid tweet_id supplied
        404:
          description: tweet_id not found
  /mentions/{tweet_id}/new:
    post:
      tags:
      - mentions
      summary: Create a tweet mentioning a/many users
      produces:
      - application/json
      parameters:
      - name: tweet_id
        in: path
        description: ID of tweet to be commented
        required: true
        type: integer
        format: int64
      - in: body
        name: Mention
        description: New mention to add
        schema:
          $ref: '#/definitions/Mention'
      responses:
        200:
          description: successful operation
        400:
          description: Invalid tweet_id
  /signup:
    get:
      tags:
      - users
      summary: Show the user creation page
      produces:
      - application/json
      responses:
        200:
          description: OK
  /{tweet_id}/like:
    get:
      tags:
      - likes
      summary: Number of likes for a specific tweet
      description: Recieve an integer with the number of likes
      produces:
      - application/json
      parameters:
      - name: tweet_id
        in: path
        description: id for a specific tweet
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
        400:
          description: Invalid tweet_id supplied
        404:
          description: tweet_id not found
    post:
      tags:
      - likes
      summary: Add new like for specific tweet by a specific user
      consumes: 
      - application/json
      produces:
      - application/json
      parameters:
      - name: tweet_id
        in: path
        description: User id and tweet id
        required: true
        type: integer
        format: int64
      - in: body
        name: Like
        description: New like to add
        schema:
          $ref: '#/definitions/Like'
      responses:
        default:
          description: successful operation
    delete:
      tags: 
      - likes
      summary: Delete like for a tweet by a user
      description: Unlike a tweet that a user liked
      produces:
      - application/json
      parameters:
      - name: tweet_id 
        in: path
        description: Delete like by a user on a tweet
        required: true
        type: integer
        format: int64
      responses:
        400:
          description: Invalid User supplied or invalid tweet ID
        404:
          description: Like was not found
  /follows/{user_id}/{followed_id}:
    post:
      tags:
      - follows
      summary: Add new follow relationship between two users
      consumes: 
      - application/json
      produces:
      - application/json
      parameters:
      - name: user_id
        in: path
        description: User id who follows
        required: true
        type: integer
        format: int64
      - name: followed_id
        in: path
        description: User id who is followed
        required: true
        type: integer
        format: int64
      - in: body
        name: Follow
        description: New follow relationship to add
        schema:
          $ref: '#/definitions/Follow'
      responses:
        default:
          description: successful operation
    delete:
      tags: 
      - follows
      summary: Delete follow relationship between two users
      description: Unfollow a user who was followed
      produces:
      - application/json
      parameters:
      - name: user_id
        in: path
        description: User id who follows
        required: true
        type: integer
        format: int64
      - name: followed_id
        in: path
        description: User id who is followed
        required: true
        type: integer
        format: int64
      responses:
        400:
          description: Invalid User supplied 
        404:
          description: Follow was not found
  /{user_id}/following/users:
    get:
      tags:
      - follows
      summary: User being followed by current user
      description: Return a list of users followed by current user
      produces:
      - application/json
      parameters:
      - name: user_id
        in: path
        description: id for current user
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        400:
          description: Invalid user_id supplied
        404:
          description: user_id not found 
  /{user_id}/followed/users:
    get:
      tags:
      - follows
      summary: Users who are following current user
      description: Return a list of users follow current user
      produces:
      - application/json
      parameters:
      - name: user_id
        in: path
        description: id for current user
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        400:
          description: Invalid user_id supplied
        404:
          description: user_id not found
  /notifications/{username}:  
    get:
      tags:
      - notifications
      summary: Show all notifications
      produces:
      - application/json
      parameters:
      - name: username
        in: path
        description: username of the user
        required: true
        type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/AllNotifications'
        404:
          description: User not found
          schema:
            $ref: '#/definitions/NoUserNotifications'
  /hash_tags/new:
    post:
      tags:
      - hash_tags
      summary: Create a new hash_tags
      produces:
      - application/json
      parameters:
      - in: body
        name: HashTag
        description: New hashtag to add
        schema:
          $ref: '#/definitions/HashTag'
      responses:
        200:
          description: successful operation
  /search/{keyword}:
    get:
      tags:
      - search
      summary: Show all search result of keyword
      produces: 
      - application/json
      parameters: 
      - name: keyword
        in: path
        description: keyword to be searched
        required: true
        type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Search'
        404:
          description: no result of such keyword
securityDefinitions:
  petstore_auth:
    type: oauth2
    authorizationUrl: http://petstore.swagger.io/oauth/dialog
    flow: implicit
    scopes:
      write:pets: modify pets in your account
      read:pets: read your pets
  api_key:
    type: apiKey
    name: api_key
    in: header
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
################################################################################
#                                 Components                                  #
################################################################################
definitions:
  User:
    type: object
    properties:
      id:
        type: number
        example: 10
      name:
        type: string
        example: Widget Adapter  
      email:
        type: string
        example: someone@blabla.com
      password:
        type: string
        example: ntpwd123
  Tweet:
    type: object
    properties:
      tweet_id:
        type: number
        example: 2
      user_id:
        type: number
        example: 10
      content:
        type: string
        example: I put a tweet! 
  Comment:
    type: object
    properties:
      comment_id:
        type: integer
        example: 1
      tweet_id:
        type: integer
        example: 2
      user_id:
        type: integer
        example: 12
      content:
        type: string
        example: I like this tweet!
  Follow:
    type: object
    properties:
      id:
        type: number
        example: 1
      follower_id:
        type: number
        example: 10
      followed_id:
        type: number
        example: 12  
  NoUserNotifications:
     type: object
     properties:
       username:
         type: string
       success:
         type: boolean
  AllNotifications:
    type: object
    properties:
      username:
        type: string
        example: pito_salas
      total:
        type: integer
        format: int64
      success:
        type: boolean
      notifications:
        type: array
        items:
          type: object
          properties:
            id:
              type: integer
              format: int64
            message:
              type: string
            timestamp:
              type: string
  Search:
    type: object
    properties:
      keyword:
        type: string
        example: donald trump
      total:
        type: integer
        format: int64
      success:
        type: boolean
      results:
        type: array
        items:
          type: object
          properties:
            result_type:
              type: string
              enum: [tweet, hashtag, user]
            result:
              $ref: '#/definitions/Tweet'
  HashTag:
    type: object
    properties:
      id:
        type: number
        example: 1
      content:
        type: string
        example: Football 
  Like:
    type: object
    properties:
      id:
        type: number
        example: 1
      tweet_id:
        type: number
        example: 1
      user_id:
        type: number
        example: 12 
  Mention:
    type: object
    properties:
      id:
        type: number
        example: 1
      tweet_id:
        type: number
        example: 1
      user_id:
        type: number
        example: 12 
host: nanotwitter.com
basePath: /api/v1
schemes:
 - https
